int automata(char *expresion, char *error){
	char tipoError[70];
	int len = 0, inicio = 0, estado = 0, columna = 0, vPila = 0;
	struct recorrido 	estado00 = {0,0}, estado01 = {0,1}, 
						estado10 = {1,0}, estado11 = {1,1}, 
						estado02 = {0,2}, estado03 = {0,3}, 
						estado24 = {2,4}, 
						error1 = {3,1}, 
						error2 = {3,2}, 
						error3 = {3,3}, 
						error4 = {3,4}, 
						error5 = {3,5}, 
						error6 = {3,6}, 
						error7 = {3,7};
	struct recorrido automata[2][3][6]={{{error1,estado10,error2,estado02,error2,error3},{estado10,estado10,estado00,error4,error4,error3},{error5,error5,estado00,error5,error5,error3}},
							  			{{error1,estado11,error2,estado03,error2,error3},{estado11,estado11,estado01,error6,estado24,error3},{error7,error7,estado01,error7,estado24,error3}}};
    escribirPila(&pila,'$');
	while(expresion[len] != '\0'){
		if (estado!=3){
			switch(leerPila(&pila)){
				case '$':
					inicio = 0;
					break;
				case 'R':
					inicio = 1;
					break;
			}
			if(expresion[len] == '0'){
				columna = 0;
			}
			else if(expresion[len]>='1' && expresion[len]<='9'){
				columna = 1;
			}
			else if(expresion[len]=='+' || expresion[len]=='-' || expresion[len]=='*' || expresion[len]=='/'){
				columna = 2;
			}
			else if(expresion[len]=='('){
				columna = 3;
			}
			else if(expresion[len]==')'){
				columna = 4;
			}
			else{
				columna = 5;
			}
			vPila = automata[inicio][estado][columna].pila;
			switch (vPila){
				case 0:
					escribirPila(&pila, '$');
				break;
				case 1:
					escribirPila(&pila, 'R');
				break;
				case 2:
					escribirPila(&pila, '$');
					escribirPila(&pila, 'R');
				break;
				case 3:
					escribirPila(&pila, 'R');
					escribirPila(&pila, 'R');
				break;
			}
			estado = automata[inicio][estado][columna].estado;
		}
		evaluaError(len, estado, vPila, tipoError, error);
		len++;
	}
	error[len]='\0';
	switch (estado){
		case 0:
			strcpy(tipoError,"^->Se esperaba un numero o un '(' (Parentesis de apertura).");
			break;
		case 1:
		case 2:
			if (leerPila(&pila) == 'R'){
				strcpy(tipoError,"^->Se esperaba un ')' (Parentesis de cierre).");
				estado = 3;
			} 
			break;	
	}
	free(pila);
	strcat(error, tipoError);
	return estado;
}